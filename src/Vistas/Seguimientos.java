/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package vistas;

import Tablas_Model.AdmDatos;
import Tablas_Model.MTpersona;
import controlador.PersonaJpaController;
import controlador.DoctorJpaController;
import controlador.SecretariaJpaController;
import controlador.AdministradorJpaController;
import controlador.PacienteJpaController;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import modelo.Persona;
import modelo.Doctor;
import modelo.Secretaria;
import modelo.Administrador;
import modelo.Paciente;


/**
 *
 * @author abiga
 */
public class Seguimientos extends javax.swing.JPanel {
    
    private AdmDatos adm;
    private PersonaJpaController cPersona;
    private DoctorJpaController cDoctor;
    private SecretariaJpaController cSecretaria;
    private AdministradorJpaController cAdmin;
    private PacienteJpaController cPaciente;

    private List<Persona> personas;        // Todas las personas
    private MTpersona mtPersona;

    /**
     * Creates new form sTutoria
     */
    public Seguimientos() {
        initComponents();
       
        adm = new AdmDatos();
        cPersona = new PersonaJpaController(adm.getEmf());
        cDoctor = new DoctorJpaController(adm.getEmf());
        cSecretaria = new SecretariaJpaController(adm.getEmf());
        cAdmin = new AdministradorJpaController(adm.getEmf());
        cPaciente = new PacienteJpaController(adm.getEmf());

        personas = cPersona.findPersonaEntities();
        mtPersona = new MTpersona(personas);
        tablePERSONAS.setModel(mtPersona);

        cargarComboTipo();
        
    }
    
    private void cargarComboTipo() {
        comboTipo.removeAllItems();
        comboTipo.addItem("Todas");       // Por defecto muestra todas
        comboTipo.addItem("Doctor");
        comboTipo.addItem("Secretaria");
        comboTipo.addItem("Administrador");
        comboTipo.addItem("Paciente");
        comboTipo.setSelectedItem("Todas");
    }
    
    public void cargarTiposFiltro() {
        comboTipo.setEnabled(true);
        comboTipo.removeAllItems();
        comboTipo.addItem("Todo");
        comboTipo.addItem("Doctor");
        comboTipo.addItem("Secretaria");
        comboTipo.addItem("Administrador");
        comboTipo.addItem("Paciente");
    }
    
    public void aplicarFiltroPorTipo() {
        String tipoSeleccionado = (String) comboTipo.getSelectedItem();
        if (tipoSeleccionado == null || tipoSeleccionado.equals("Todo")) {
            mtPersona.setLista(personas);
            tablePERSONAS.updateUI();
            return;
        }

        List<Persona> filtradas = new ArrayList<>();

        switch (tipoSeleccionado) {
            case "Doctor":
                List<Doctor> doctores = cDoctor.findDoctorEntities();
                for (Doctor d : doctores) {
                    if (d.getPersonaId() != null) filtradas.add(d.getPersonaId());
                }
                break;
            case "Secretaria":
                List<Secretaria> secretarias = cSecretaria.findSecretariaEntities();
                for (Secretaria s : secretarias) {
                    if (s.getPersonaId() != null) filtradas.add(s.getPersonaId());
                }
                break;
            case "Administrador":
                List<Administrador> admins = cAdmin.findAdministradorEntities();
                for (Administrador a : admins) {
                    if (a.getPersonaId() != null) filtradas.add(a.getPersonaId());
                }
                break;
            case "Paciente":
                List<Paciente> pacientes = cPaciente.findPacienteEntities();
                for (Paciente p : pacientes) {
                    if (p.getPersonaId() != null) filtradas.add(p.getPersonaId());
                }
                break;
        }

        mtPersona.setLista(filtradas);
        tablePERSONAS.updateUI();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboPERSONAS = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePERSONAS = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        comboTipo = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Segoe UI Black", 3, 18)); // NOI18N
        jLabel1.setText("Seguimiento de Personas por Filtros");

        comboPERSONAS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboPERSONASActionPerformed(evt);
            }
        });

        tablePERSONAS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Tutor", "Tutorado", "Fecha", "Hora", "Acciones"
            }
        ));
        jScrollPane1.setViewportView(tablePERSONAS);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Filtro:");

        comboTipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todo" }));
        comboTipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(99, 99, 99)
                                .addComponent(comboPERSONAS, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 584, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jLabel1)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboPERSONAS, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(comboTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboPERSONASActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboPERSONASActionPerformed
        // TODO add your handling code here:
        aplicarFiltro();
    }//GEN-LAST:event_comboPERSONASActionPerformed

    private void aplicarFiltro() {
        String tipo = (String) comboTipo.getSelectedItem();
        if (tipo == null || tipo.equals("Todas")) {
            mtPersona.setLista(personas);
            return;
        }

        List<Persona> filtradas = new ArrayList<>();

        for (Persona p : personas) {
            boolean esTipo = false;
            switch (tipo) {
                case "Doctor":
                    esTipo = cDoctor.findDoctorEntities().stream().anyMatch(d -> d.getPersonaId().equals(p));
                    break;
                case "Secretaria":
                    esTipo = cSecretaria.findSecretariaEntities().stream().anyMatch(s -> s.getPersonaId().equals(p));
                    break;
                case "Administrador":
                    esTipo = cAdmin.findAdministradorEntities().stream().anyMatch(a -> a.getPersonaId().equals(p));
                    break;
                case "Paciente":
                    esTipo = cPaciente.findPacienteEntities().stream().anyMatch(pa -> pa.getPersonaId().equals(p));
                    break;
            }
            if (esTipo) filtradas.add(p);
        }

        mtPersona.setLista(filtradas);
    }



    private void comboTipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoActionPerformed
        // TODO add your handling code here:
        aplicarFiltro();
    }//GEN-LAST:event_comboTipoActionPerformed

    public void cargarValoresFiltro() {
    comboPERSONAS.removeAllItems();
        comboPERSONAS.addItem("TODO");

        String tipo = (String) comboTipo.getSelectedItem();
        Set<String> valoresUnicos = new HashSet<>();

        for (Persona p : personas) {
            switch (tipo) {
                case "Nombre": valoresUnicos.add(p.getNombre()); break;
                case "Apellido": valoresUnicos.add(p.getApellido()); break;
                case "Teléfono": valoresUnicos.add(p.getTelefono()); break;
                case "Email": valoresUnicos.add(p.getEmail()); break;
                case "Fecha Nacimiento": valoresUnicos.add(String.valueOf(p.getFechanacimiento())); break;
                case "Dirección": valoresUnicos.add(p.getDireccion()); break;
            }
        }

        for (String valor : valoresUnicos) {
            comboPERSONAS.addItem(valor);
        }

        comboPERSONAS.setSelectedItem("TODO");
        comboPERSONAS.setEnabled(true);
}


    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboPERSONAS;
    private javax.swing.JComboBox<String> comboTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablePERSONAS;
    // End of variables declaration//GEN-END:variables
}
